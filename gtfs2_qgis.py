# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GTFS2QGIS
                                 A QGIS plugin
 This plugin enables loading GTFS data into QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-06-28
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Christoffer WeckstrÃ¶m
        email                : j.c.weckstrom@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys
import os
path_to_add = os.path.join(os.path.dirname(__file__), "gtfspy/")
if path_to_add not in sys.path:
    sys.path.append(path_to_add)
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .gtfs2_qgis_dialog import GTFS2QGISDialog
import os.path
from gtfspy.import_gtfs import import_gtfs
#import seaborn as sns


class GTFS2QGIS:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GTFS2QGIS_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GTFS2QGIS')
        self.checker = None
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GTFS2QGIS', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/gtfs2_qgis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(
                self.tr(u'&GTFS2QGIS'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_input_files(self):
        if self.dlg.folderCheck.isChecked():
            self.select_input_directory()
        else:
            filenames, _filter = QFileDialog.getOpenFileNames(
                self.dlg, "Select input file(s) ", "", '*.zip')
            self.dlg.lineEdit.setText("; ".join(filenames))

    def select_input_directory(self):
        dir = QFileDialog.getExistingDirectory(
            self.dlg, "Select input directory")
        filenames = []
        for root, dirs, files in os.walk(dir):
            for file in files:
                if file[-4:] == ".zip":
                    filenames.append(os.path.join(root, file))
        self.dlg.lineEdit.setText("; ".join(filenames))

    def select_output_file(self):
        sqlite_suffix = ".sqlite"
        output_filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select output file ", "", '*.sqlite')
        if not output_filename[-7:] == sqlite_suffix:
            output_filename = output_filename+sqlite_suffix
        self.dlg.lineEdit_2.setText(output_filename)

    def import_process(self):
        output_filename = self.dlg.lineEdit_2.text()
        import_filenames = self.dlg.lineEdit.text().split("; ")
        import_gtfs(import_filenames, output_filename)

    def set_checker(self, int):
        self.checker = self.dlg.folderCheck.isChecked()

    def state_changed(self, int):
        if self.dlg.folderCheck.isChecked():
            self.dlg.my_label.setText("CHECKED!")
        else:
            self.dlg.my_label.setText("UNCHECKED!")

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start is True:
            self.first_start = False

            self.dlg = GTFS2QGISDialog()

            #self.dlg.folderCheck.stateChanged.connect(self.set_checker)
            self.dlg.pushButton_input.clicked.connect(self.select_input_files)
            self.dlg.pushButton_output.clicked.connect(self.select_output_file)


        # TODO: how to implement the isChecked after the dlg is visible?
        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            self.import_process()

            #import_gtfs(input_paths, output_path)
